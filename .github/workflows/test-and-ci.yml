name: Test and CI

on: [push]

jobs:
  cleanup-runs:
    runs-on: ubuntu-22.04
    if: "!startsWith(github.ref, 'refs/tags/')"
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@v0.3.3
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  test-client:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up node ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: '16.13.2'
    - name: Install client dependencies
      run: |
        cd client
        npm install
      env:
        NODE_OPTIONS: '--max-old-space-size=4096'
    - name: Run test client
      run: |
        cd client
        npm test
      env:
        CI: true
    - name: Run lint client
      run: |
        cd client
        npm run lint
    - name: Build client
      run: |
        cd client
        npm run-script build
      env:
        NODE_OPTIONS: '--max-old-space-size=4096'

  test-server:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up node ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: '16.13.2'
    - name: Install server dependencies and build
      run: |
        cd server
        npm install
        npm run-script build
      env:
        NODE_OPTIONS: '--max-old-space-size=4096'
    - name: Run test server
      run: |
        cd server
        npm test
      env:
        CI: true
    - name: Run lint server
      run: |
        cd server
        npm run lint
  
  lint-e2e:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: '16.13.2'
      - name: Install project e2e dependencies
        run: |
          cd tests
          npm install
      - name: Run lint e2e
        run: |
          cd tests
          npm run lint

  run-e2e:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          browser: chrome
          build: npm run build-client
          start: npm run start
          wait-on: http://localhost:3000
          wait-on-timeout: 180
          working-directory: tests
      - uses: actions/upload-artifact@v3
        if: failure() # Cypress screenshots will be generated only if the test failed, thus we store screenshots only on failures
        with:
          name: cypress-screenshots
          path: tests/cypress/screenshots
          retention-days: 7
      - uses: actions/upload-artifact@v3
        if: always() # Cypress test video is always captured, so this action uses "always()" condition
        with:
          name: cypress-videos
          path: tests/cypress/videos
          retention-days: 3

  run-e2e-var1:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          browser: chrome
          build: npm run build-client
          command: npm run e2e
          wait-on: http://localhost:3000
          wait-on-timeout: 180
          working-directory: tests
      - uses: actions/upload-artifact@v3
        if: failure() # Cypress screenshots will be generated only if the test failed, thus we store screenshots only on failures
        with:
          name: cypress-screenshots
          path: tests/cypress/screenshots
          retention-days: 7
      - uses: actions/upload-artifact@v3
        if: always() # Cypress test video is always captured, so this action uses "always()" condition
        with:
          name: cypress-videos
          path: tests/cypress/videos
          retention-days: 3
  
  run-e2e-alternative-1:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          browser: chrome
          build: npm run build-client
          start: npm run e2e
          working-directory: tests
      - uses: actions/upload-artifact@v3
        if: failure() # Cypress screenshots will be generated only if the test failed, thus we store screenshots only on failures
        with:
          name: cypress-screenshots
          path: tests/cypress/screenshots
          retention-days: 7
      - uses: actions/upload-artifact@v3
        if: always() # Cypress test video is always captured, so this action uses "always()" condition
        with:
          name: cypress-videos
          path: tests/cypress/videos
          retention-days: 3

  run-e2e-alternative-2:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          browser: chrome
          build: npm run build-client
          start: npm run start-wait
          wait-on: "http://localhost:3000"
          working-directory: tests
      - uses: actions/upload-artifact@v3
        if: failure() # Cypress screenshots will be generated only if the test failed, thus we store screenshots only on failures
        with:
          name: cypress-screenshots
          path: tests/cypress/screenshots
          retention-days: 7
      - uses: actions/upload-artifact@v3
        if: always() # Cypress test video is always captured, so this action uses "always()" condition
        with:
          name: cypress-videos
          path: tests/cypress/videos
          retention-days: 3

  test-chart:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Install helm
        uses: azure/setup-helm@v1
        with:
          version: '3.8.0'
      - name: Test helm chart
        run: |
          helm dependency update helm-chart/renku-ui
          helm lint helm-chart/renku-ui -f helm-chart/minikube-values.yaml

  build-chart:
    needs: [test-client, test-server, test-chart]
    runs-on: ubuntu-22.04
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install helm
        uses: azure/setup-helm@v1
        with:
          version: '3.8.0'
      - name: Build chart and images
        run: |
          python -m pip install --upgrade pip "chartpress==1.3.0" "ruamel.yaml==0.15.54" "six==1.16.0"
          chartpress

  publish-chart:
    needs: build-chart
    runs-on: ubuntu-22.04
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: set up environment variables
      run: |
        echo "GIT_USER=Renku Bot" >> $GITHUB_ENV
        echo "GIT_EMAIL=renku@datascience.ch" >> $GITHUB_ENV
    - name: Push chart and images
      uses: SwissDataScienceCenter/renku-actions/publish-chart@v1.4.2
      env:
        GITHUB_TOKEN: ${{ secrets.RENKUBOT_GITHUB_TOKEN }}
        CHART_NAME: renku-ui
        DOCKER_USERNAME: ${{ secrets.RENKU_DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.RENKU_DOCKER_PASSWORD }}
    - name: Wait for chart to get published
      run: sleep 120
    - name: Update ui version
      uses: SwissDataScienceCenter/renku-actions/update-component-version@v1.4.2
      env:
        GITHUB_TOKEN: ${{ secrets.RENKUBOT_GITHUB_TOKEN }}
        CHART_NAME: renku-ui
