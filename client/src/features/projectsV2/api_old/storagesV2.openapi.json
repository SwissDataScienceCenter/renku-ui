{
  "openapi": "3.0.2",
  "info": {
    "title": "Renku Compute Resource Control (CRC) service",
    "description": "Service that provide information about compute resources, resource pools\nand user access to them. All errors have the same format as the schema\ncalled ErrorResponse.\n",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/api/data"
    },
    {
      "url": "/ui-server/api/data"
    }
  ],
  "paths": {
    "/storages_v2/{storage_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "storage_id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/UlidId"
          },
          "description": "the id of the storage"
        }
      ],
      "get": {
        "summary": "get cloud storage details",
        "responses": {
          "200": {
            "description": "Found the cloud storage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudStorageGet"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["storages_v2"]
      },
      "patch": {
        "summary": "partially update a cloud storage entry",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudStoragePatch"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The cloud storage entry was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudStorageGet"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["storages_v2"]
      },
      "delete": {
        "summary": "remove a cloud storage definition",
        "responses": {
          "204": {
            "description": "The rcloud storage was removed or did not exist in the first place"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["storages_v2"]
      }
    },
    "/storages_v2": {
      "get": {
        "summary": "get cloud storage for a project by id",
        "parameters": [
          {
            "in": "query",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UlidId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the storage configurations for the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CloudStorageGet"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Storage was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["storages_v2"]
      },
      "post": {
        "summary": "create a new cloud storage for a project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CloudStorage"
                  },
                  {
                    "$ref": "#/components/schemas/CloudStorageUrl"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The cloud storage entry was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudStorageGet"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["storages_v2"]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "minimum": 0,
                "exclusiveMinimum": true,
                "example": 1404
              },
              "detail": {
                "type": "string",
                "example": "A more detailed optional message showing what the problem was"
              },
              "message": {
                "type": "string",
                "example": "Something went wrong - please try again later"
              }
            },
            "required": ["code", "message"]
          }
        },
        "required": ["error"]
      },
      "GitRequest": {
        "type": "object",
        "properties": {
          "project_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GitlabProjectId"
              },
              {
                "$ref": "#/components/schemas/UlidId"
              }
            ]
          }
        },
        "required": ["project_id"],
        "example": {
          "project_id": 123456
        }
      },
      "RCloneConfig": {
        "type": "object",
        "description": "Dictionary of rclone key:value pairs (based on schema from '/storage_schema')",
        "additionalProperties": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "string",
              "nullable": true
            },
            {
              "type": "boolean"
            },
            {
              "type": "object"
            }
          ]
        }
      },
      "CloudStorageUrl": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GitRequest"
          },
          {
            "type": "object",
            "properties": {
              "storage_url": {
                "type": "string"
              },
              "name": {
                "$ref": "#/components/schemas/StorageName"
              },
              "target_path": {
                "type": "string",
                "description": "the target path relative to the repository where the storage should be mounted",
                "example": "my/project/folder"
              },
              "readonly": {
                "type": "boolean",
                "description": "Whether this storage should be mounted readonly or not",
                "default": true
              }
            },
            "required": ["name", "storage_url", "target_path"],
            "example": {
              "storage_url": "s3://giab"
            }
          }
        ]
      },
      "CloudStorage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GitRequest"
          },
          {
            "type": "object",
            "properties": {
              "storage_type": {
                "$ref": "#/components/schemas/StorageType"
              },
              "name": {
                "$ref": "#/components/schemas/StorageName"
              },
              "configuration": {
                "$ref": "#/components/schemas/RCloneConfig"
              },
              "source_path": {
                "type": "string",
                "description": "the source path to mount, usually starts with bucket/container name",
                "example": "bucket/my/storage/folder/"
              },
              "target_path": {
                "type": "string",
                "description": "the target path relative to the repository where the storage should be mounted",
                "example": "my/project/folder"
              },
              "readonly": {
                "type": "boolean",
                "description": "Whether this storage should be mounted readonly or not",
                "default": true
              }
            },
            "required": ["name", "configuration", "source_path", "target_path"]
          }
        ]
      },
      "CloudStoragePatch": {
        "type": "object",
        "properties": {
          "project_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GitlabProjectId"
              },
              {
                "$ref": "#/components/schemas/UlidId"
              }
            ]
          },
          "storage_type": {
            "$ref": "#/components/schemas/StorageType"
          },
          "name": {
            "$ref": "#/components/schemas/StorageName"
          },
          "configuration": {
            "$ref": "#/components/schemas/RCloneConfig"
          },
          "source_path": {
            "$ref": "#/components/schemas/SourcePath"
          },
          "target_path": {
            "type": "string",
            "description": "the target path relative to the repository where the storage should be mounted",
            "example": "my/project/folder"
          },
          "readonly": {
            "type": "boolean",
            "description": "Whether this storage should be mounted readonly or not"
          }
        }
      },
      "CloudStorageWithId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudStorage"
          },
          {
            "type": "object",
            "required": ["storage_id"],
            "properties": {
              "storage_id": {
                "$ref": "#/components/schemas/UlidId"
              }
            }
          }
        ]
      },
      "CloudStorageGet": {
        "type": "object",
        "description": "Get response for a cloud storage. Contains storage and information about fields that are required if the storage is private.",
        "properties": {
          "storage": {
            "$ref": "#/components/schemas/CloudStorageWithId"
          },
          "sensitive_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RCloneOption"
            }
          }
        },
        "required": ["storage"]
      },
      "RCloneSchema": {
        "description": "List of RClone schemas for different storage types",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RCloneEntry"
        }
      },
      "RCloneEntry": {
        "type": "object",
        "description": "Schema for a storage type in rclone, like S3 or Azure Blob Storage. Contains fields for that storage type.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human readable name of the provider"
          },
          "description": {
            "type": "string",
            "description": "description of the provider"
          },
          "prefix": {
            "type": "string",
            "description": "Machine readable name of the provider"
          },
          "options": {
            "description": "Fields/properties used for this storage.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RCloneOption"
            }
          }
        }
      },
      "RCloneOption": {
        "type": "object",
        "description": "Single field on an RClone storage, like \"remote\" or \"access_key_id\"",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the option"
          },
          "help": {
            "type": "string",
            "description": "help text for the option"
          },
          "provider": {
            "type": "string",
            "description": "The cloud provider the option is for (See 'provider' RCloneOption in the schema for potential values)",
            "example": "AWS"
          },
          "default": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "object"
              },
              {
                "type": "array"
              }
            ],
            "description": "default value for the option"
          },
          "default_str": {
            "type": "string",
            "description": "string representation of the default value"
          },
          "examples": {
            "description": "These list potential values for this option, like an enum. With `exclusive: true`, only a value from the list is allowed.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "a potential value for the option (think enum)"
                },
                "help": {
                  "type": "string",
                  "description": "help text for the value"
                },
                "provider": {
                  "type": "string",
                  "description": "The provider this value is applicable for. Empty if valid for all providers."
                }
              }
            }
          },
          "required": {
            "type": "boolean",
            "description": "whether the option is required or not"
          },
          "ispassword": {
            "type": "boolean",
            "description": "whether the field is a password (use **** for display)"
          },
          "sensitive": {
            "type": "boolean",
            "description": "whether the value is sensitive (not stored in the service). Do not send this in requests to the service."
          },
          "advanced": {
            "type": "boolean",
            "description": "whether this is an advanced config option (probably don't show these to users)"
          },
          "exclusive": {
            "type": "boolean",
            "description": "if true, only values from 'examples' can be used"
          },
          "datatype": {
            "type": "string",
            "description": "data type of option value. RClone has more options but they map to the ones listed here.",
            "enum": ["int", "bool", "string", "Time"]
          }
        }
      },
      "UlidId": {
        "description": "ULID identifier of an object",
        "type": "string",
        "minLength": 26,
        "maxLength": 26,
        "pattern": "^[A-Z0-9]+$",
        "format": "ulid"
      },
      "GitlabProjectId": {
        "description": "Project id of a gitlab project (only int project id allowed, encoded as string for future-proofing)",
        "type": "string",
        "pattern": "^[0-9]+$",
        "example": "123456"
      },
      "StorageName": {
        "description": "Name of the storage",
        "type": "string",
        "minLength": 3,
        "pattern": "^[a-zA-Z0-9_-]+$"
      },
      "SourcePath": {
        "type": "string",
        "description": "the source path to mount, usually starts with bucket/container name",
        "example": "bucket/my/storage/folder/"
      },
      "StorageType": {
        "type": "string",
        "description": "same as rclone prefix/ rclone config type. Ignored in requests, but returned in responses for convenience.",
        "readOnly": true
      }
    },
    "responses": {
      "Error": {
        "description": "The schema for all 4xx and 5xx responses",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  }
}
