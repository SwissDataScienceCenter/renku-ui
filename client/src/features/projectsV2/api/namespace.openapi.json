{
  "openapi": "3.0.2",
  "info": {
    "title": "Renku Namespace Management Service",
    "description": "Service that allows creating, updating, deleting, and managing Renku native namespaces.\nAll errors have the same format as the schema called ErrorResponse.\n",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "/api/data"
    },
    {
      "url": "/ui-server/api/data"
    }
  ],
  "paths": {
    "/namespaces": {
      "get": {
        "summary": "Get all namespaces",
        "parameters": [
          {
            "in": "query",
            "description": "Result's page number starting from 1",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "The number of results per page",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of namespaces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespacesList"
                }
              }
            },
            "headers": {
              "page": {
                "description": "The index of the current page (starting at 1).",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              },
              "per-page": {
                "description": "The number of items per page.",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              },
              "total": {
                "description": "The total number of items.",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              },
              "total-pages": {
                "description": "The total number of pages.",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["namespaces"]
      },
      "post": {
        "summary": "Create a new namespace",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NamespacePost"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The namespace was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["namespaces"]
      }
    },
    "/namespaces/{namespace_slug}": {
      "get": {
        "summary": "Get a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The namespace",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            }
          },
          "404": {
            "description": "The namespace does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["namespaces"]
      },
      "patch": {
        "summary": "Update specific fields of an existing namespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NamespacePatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The patched namespace",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            }
          },
          "404": {
            "description": "The namespace does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["namespaces"]
      },
      "delete": {
        "summary": "Remove a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The namespace was removed or did not exist in the first place"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["namespaces"]
      }
    },
    "/namespaces/{namespace_slug}/members": {
      "get": {
        "summary": "Get all members of a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The namespace's members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullUsersWithRoles"
                }
              }
            }
          },
          "404": {
            "description": "The namespace does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["namespaces"]
      },
      "patch": {
        "summary": "New members in the list are added to the namespace's members. If a member\nalready exists, then only the role is updated. No member will be deleted\nin this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "namespace_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembersWithRoles"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The namespace's members were updated"
          },
          "404": {
            "description": "The namespace does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["namespaces"]
      }
    },
    "/namespaces/{namespace_slug}/members/{member_id}": {
      "delete": {
        "summary": "Remove a member from a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "member_id",
            "description": "This is user's KeyCloak ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The member was removed or wasn't part of namespace's members."
          },
          "404": {
            "description": "The namespace does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["namespaces"]
      }
    }
  },
  "components": {
    "schemas": {
      "NamespacesList": {
        "description": "A list of Renku namespaces",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Namespace"
        },
        "minItems": 0
      },
      "Namespace": {
        "description": "A Renku native namespace definition and metadata",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Ulid"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "slug": {
            "$ref": "#/components/schemas/Slug"
          },
          "creation_date": {
            "$ref": "#/components/schemas/CreationDate"
          },
          "created_by": {
            "$ref": "#/components/schemas/Member"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          }
        },
        "required": ["id", "name", "created_by", "creation_date"],
        "example": {
          "id": "01AN4Z79ZS5XN0F25N3DB94T4R",
          "name": "R-Project Namespace",
          "slug": "r-project",
          "created_by": {
            "id": "owner-KC-id"
          }
        }
      },
      "NamespacePost": {
        "description": "Namespace metadata to be created in Renku",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "slug": {
            "$ref": "#/components/schemas/Slug"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          }
        },
        "required": ["name"]
      },
      "NamespacePatch": {
        "type": "object",
        "description": "Patch of a namespace",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "slug": {
            "$ref": "#/components/schemas/Slug"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          }
        }
      },
      "Ulid": {
        "description": "ULID identifier",
        "type": "string",
        "minLength": 26,
        "maxLength": 26,
        "pattern": "^[A-Z0-9]{26}$",
        "format": "ulid"
      },
      "Name": {
        "description": "Renku namespace name",
        "type": "string",
        "minLength": 1,
        "maxLength": 99,
        "example": "My Renku Namespace :)"
      },
      "Slug": {
        "description": "A command-line/url friendly name for a namespace",
        "type": "string",
        "minLength": 1,
        "maxLength": 99,
        "pattern": "^[a-z0-9]+[a-z0-9._-]*$",
        "example": "my-renku-namespace"
      },
      "CreationDate": {
        "description": "The date and time the namespace was created (time is always in UTC)",
        "type": "string",
        "format": "date-time",
        "example": "2023-11-01T17:32:28Z"
      },
      "Description": {
        "description": "A description for the namespace",
        "type": "string",
        "maxLength": 500
      },
      "Member": {
        "description": "A KeyCloak user",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/KeyCloakId"
          }
        },
        "required": ["id"],
        "example": {
          "id": "some-keycloak-user-id"
        }
      },
      "KeyCloakId": {
        "description": "Member's KeyCloak ID",
        "type": "string",
        "pattern": "^[A-Za-z0-9-]+$",
        "minLength": 1,
        "example": "123-keycloak-user-id-456"
      },
      "MembersWithRoles": {
        "description": "List of members and their access level to the namespace",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MemberWithRole"
        },
        "minItems": 0,
        "example": [
          {
            "id": "some-keycloak-user-id",
            "role": "owner"
          },
          {
            "id": "another-keycloak-user-id",
            "role": "member"
          }
        ]
      },
      "MemberWithRole": {
        "description": "A member and the access level to the namespace",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "member": {
            "$ref": "#/components/schemas/Member"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        },
        "required": ["member", "role"],
        "example": {
          "member": {
            "id": "some-keycloak-user-id"
          },
          "role": "owner"
        }
      },
      "FullUsersWithRoles": {
        "description": "List of members with full info and their access level to the namespace",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FullUserWithRole"
        },
        "minItems": 0
      },
      "FullUserWithRole": {
        "description": "A member with full info (email, name, ...) and the access level to the namespace",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "member": {
            "$ref": "#/components/schemas/UserWithId"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        },
        "required": ["member", "role"]
      },
      "Role": {
        "description": "Possible roles of members in a namespace",
        "type": "string",
        "enum": ["member", "owner"]
      },
      "UserWithId": {
        "type": "object",
        "description": "This is copied from ../users/api.spec.yaml",
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UserId"
          },
          "email": {
            "$ref": "#/components/schemas/UserEmail"
          },
          "first_name": {
            "$ref": "#/components/schemas/UserFirstLastName"
          },
          "last_name": {
            "$ref": "#/components/schemas/UserFirstLastName"
          }
        },
        "required": ["id"],
        "example": {
          "id": "some-random-keycloak-id",
          "email": "user@gmail.com"
        }
      },
      "UserId": {
        "type": "string",
        "description": "Keycloak user ID",
        "example": "f74a228b-1790-4276-af5f-25c2424e9b0c"
      },
      "UserFirstLastName": {
        "type": "string",
        "description": "First or last name of the user",
        "example": "John",
        "minLength": 1,
        "maxLength": 256
      },
      "UserEmail": {
        "type": "string",
        "format": "email",
        "description": "User email",
        "example": "some-user@gmail.com"
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "minimum": 0,
                "exclusiveMinimum": true,
                "example": 1404
              },
              "detail": {
                "type": "string",
                "example": "A more detailed optional message showing what the problem was"
              },
              "message": {
                "type": "string",
                "example": "Something went wrong - please try again later"
              }
            },
            "required": ["code", "message"]
          }
        },
        "required": ["error"]
      }
    },
    "responses": {
      "Error": {
        "description": "The schema for all 4xx and 5xx responses",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  }
}
