{
  "openapi": "3.0.2",
  "info": {
    "title": "Renku Data Services API",
    "description": "Service that allows creating, updating, deleting, and managing Renku native projects.\nAll errors have the same format as the schema called ErrorResponse.\n",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/api/data"
    },
    {
      "url": "/ui-server/api/data"
    }
  ],
  "paths": {
    "/projects": {
      "get": {
        "summary": "Get all projects",
        "parameters": [
          {
            "in": "query",
            "description": "query parameters",
            "name": "params",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/ProjectGetQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsList"
                }
              }
            },
            "headers": {
              "page": {
                "description": "The index of the current page (starting at 1).",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              },
              "per-page": {
                "description": "The number of items per page.",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              },
              "total": {
                "description": "The total number of items.",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              },
              "total-pages": {
                "description": "The total number of pages.",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      },
      "post": {
        "summary": "Create a new project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPost"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The project was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      }
    },
    "/projects/{project_id}": {
      "get": {
        "summary": "Get a project",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      },
      "patch": {
        "summary": "Update specific fields of an existing project",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ulid"
            }
          },
          {
            "$ref": "#/components/parameters/If-Match"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The patched project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      },
      "delete": {
        "summary": "Remove a project",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ulid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The project was removed or did not exist in the first place"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      }
    },
    "/projects/{namespace}/{slug}": {
      "get": {
        "summary": "Get a project by namespace and project slug",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      }
    },
    "/projects/{project_id}/copies": {
      "get": {
        "summary": "Get list of all copied projects",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsList"
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      },
      "post": {
        "summary": "Create a new copy",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ulid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPost"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The project was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      }
    },
    "/projects/{project_id}/members": {
      "get": {
        "summary": "Get all members of a project",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The project's members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMemberListResponse"
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      },
      "patch": {
        "summary": "New members in the list are added to the project's members. If a member\nalready exists, then only the role is updated. No member will be deleted\nin this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ulid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMemberListPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The project's members were updated"
          },
          "404": {
            "description": "The project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      }
    },
    "/projects/{project_id}/members/{member_id}": {
      "delete": {
        "summary": "Remove a member from a project",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Ulid"
            }
          },
          {
            "in": "path",
            "name": "member_id",
            "description": "This is user's KeyCloak ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The member was removed or wasn't part of project's members."
          },
          "404": {
            "description": "The project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      }
    },
    "/projects/{project_id}/permissions": {
      "parameters": [
        {
          "in": "path",
          "name": "project_id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Ulid"
          }
        }
      ],
      "get": {
        "summary": "Get the permissions of the current user on the project",
        "responses": {
          "200": {
            "description": "The set of permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPermissions"
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      }
    },
    "/projects/{project_id}/data_connector_links": {
      "parameters": [
        {
          "in": "path",
          "name": "project_id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Ulid"
          },
          "description": "the ID of the project"
        }
      ],
      "get": {
        "summary": "Get all links from data connectors to a given project",
        "responses": {
          "200": {
            "description": "List of data connector to project links",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataConnectorToProjectLinksList"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["projects"]
      }
    }
  },
  "components": {
    "schemas": {
      "ProjectsList": {
        "description": "A list of Renku projects",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Project"
        },
        "minItems": 0
      },
      "Project": {
        "description": "A Renku native project definition and metadata",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Ulid"
          },
          "name": {
            "$ref": "#/components/schemas/ProjectName"
          },
          "namespace": {
            "$ref": "#/components/schemas/Slug"
          },
          "slug": {
            "$ref": "#/components/schemas/LegacySlug"
          },
          "creation_date": {
            "$ref": "#/components/schemas/CreationDate"
          },
          "created_by": {
            "$ref": "#/components/schemas/UserId"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          "repositories": {
            "$ref": "#/components/schemas/RepositoriesList"
          },
          "visibility": {
            "$ref": "#/components/schemas/Visibility"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "etag": {
            "$ref": "#/components/schemas/ETag"
          },
          "keywords": {
            "$ref": "#/components/schemas/KeywordsList"
          },
          "template_id": {
            "$ref": "#/components/schemas/Ulid"
          }
        },
        "required": [
          "id",
          "name",
          "namespace",
          "slug",
          "created_by",
          "creation_date",
          "visibility"
        ],
        "example": {
          "id": "01AN4Z79ZS5XN0F25N3DB94T4R",
          "name": "Renku R Project",
          "namespace": "our-projects",
          "slug": "r-project",
          "created_by": {
            "id": "owner-KC-id"
          },
          "visibility": "public",
          "repositories": [
            {
              "url": "https://github.com/SwissDataScienceCenter/project-1.git"
            },
            {
              "url": "git@github.com:SwissDataScienceCenter/project-2.git"
            }
          ],
          "keywords": ["keyword 1", "keyword 2"],
          "template_id": "01JC3CB5426KC7P5STS5X3KSS8"
        }
      },
      "ProjectPost": {
        "description": "Project metadata to be created in Renku",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/ProjectName"
          },
          "namespace": {
            "$ref": "#/components/schemas/Slug"
          },
          "slug": {
            "$ref": "#/components/schemas/Slug"
          },
          "repositories": {
            "$ref": "#/components/schemas/RepositoriesList"
          },
          "visibility": {
            "$ref": "#/components/schemas/Visibility"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "keywords": {
            "$ref": "#/components/schemas/KeywordsList"
          }
        },
        "required": ["name", "namespace"]
      },
      "ProjectPatch": {
        "type": "object",
        "description": "Patch of a project",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/ProjectName"
          },
          "namespace": {
            "$ref": "#/components/schemas/Slug"
          },
          "repositories": {
            "$ref": "#/components/schemas/RepositoriesList"
          },
          "visibility": {
            "$ref": "#/components/schemas/Visibility"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "keywords": {
            "$ref": "#/components/schemas/KeywordsList"
          }
        }
      },
      "Ulid": {
        "description": "ULID identifier",
        "type": "string",
        "minLength": 26,
        "maxLength": 26,
        "pattern": "^[0-7][0-9A-HJKMNP-TV-Z]{25}$"
      },
      "ProjectName": {
        "description": "Renku project name",
        "type": "string",
        "minLength": 1,
        "maxLength": 99,
        "example": "My Renku Project :)"
      },
      "LegacySlug": {
        "description": "A command-line/url friendly name for a namespace",
        "type": "string",
        "minLength": 1,
        "maxLength": 99,
        "pattern": "^(?!.*\\.git$|.*\\.atom$|.*[\\-._][\\-._].*)[a-zA-Z0-9][a-zA-Z0-9\\-_.]*$",
        "example": "a-slug-example"
      },
      "Slug": {
        "description": "A command-line/url friendly name for a namespace",
        "type": "string",
        "minLength": 1,
        "maxLength": 99,
        "pattern": "^(?!.*\\.git$|.*\\.atom$|.*[\\-._][\\-._].*)[a-z0-9][a-z0-9\\-_.]*$",
        "example": "a-slug-example"
      },
      "CreationDate": {
        "description": "The date and time the resource was created (in UTC and ISO-8601 format)",
        "type": "string",
        "format": "date-time",
        "example": "2023-11-01T17:32:28Z"
      },
      "UpdatedAt": {
        "description": "The date and time the resource was updated (in UTC and ISO-8601 format)",
        "type": "string",
        "format": "date-time",
        "example": "2023-11-01T17:32:28Z"
      },
      "Description": {
        "description": "A description for the resource",
        "type": "string",
        "maxLength": 500
      },
      "KeywordsList": {
        "description": "Project keywords",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Keyword"
        },
        "minItems": 0,
        "example": ["project", "keywords"]
      },
      "Keyword": {
        "description": "A single keyword",
        "type": "string",
        "minLength": 1,
        "maxLength": 99,
        "pattern": "^[A-Za-z0-9\\s\\-_.]*$"
      },
      "RepositoriesList": {
        "description": "A list of repositories",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Repository"
        },
        "minItems": 0,
        "example": [
          "https://github.com/SwissDataScienceCenter/project-1.git",
          "git@github.com:SwissDataScienceCenter/project-2.git"
        ]
      },
      "Repository": {
        "description": "A project's repository",
        "type": "string",
        "example": "git@github.com:SwissDataScienceCenter/project-1.git"
      },
      "Visibility": {
        "description": "Project's visibility levels",
        "type": "string",
        "enum": ["private", "public"]
      },
      "ProjectMemberListPatchRequest": {
        "description": "List of members and their access level to the project",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ProjectMemberPatchRequest"
        },
        "minItems": 0,
        "example": [
          {
            "id": "some-keycloak-user-id",
            "role": "owner"
          },
          {
            "id": "another-keycloak-user-id",
            "role": "viewer"
          }
        ]
      },
      "ProjectMemberPatchRequest": {
        "description": "A member and the access level to the project",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UserId"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        },
        "required": ["id", "role"],
        "example": {
          "id": "some-keycloak-user-id",
          "role": "owner"
        }
      },
      "ProjectMemberListResponse": {
        "description": "List of members with full info and their access level to the project",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ProjectMemberResponse"
        },
        "minItems": 0
      },
      "ProjectMemberResponse": {
        "description": "A member with full info (namespace, name, ...) and the access level to the project",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UserId"
          },
          "namespace": {
            "$ref": "#/components/schemas/LegacySlug"
          },
          "first_name": {
            "$ref": "#/components/schemas/UserFirstLastName"
          },
          "last_name": {
            "$ref": "#/components/schemas/UserFirstLastName"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        },
        "required": ["id", "role"]
      },
      "Role": {
        "description": "Possible roles of members in a project",
        "type": "string",
        "enum": ["viewer", "editor", "owner"]
      },
      "UserId": {
        "type": "string",
        "description": "Keycloak user ID",
        "example": "f74a228b-1790-4276-af5f-25c2424e9b0c",
        "pattern": "^[A-Za-z0-9]{1}[A-Za-z0-9-]+$"
      },
      "UserFirstLastName": {
        "type": "string",
        "description": "First or last name of the user",
        "example": "John",
        "minLength": 1,
        "maxLength": 256
      },
      "ETag": {
        "type": "string",
        "description": "Entity Tag",
        "example": "9EE498F9D565D0C41E511377425F32F3"
      },
      "DataConnectorToProjectLinksList": {
        "description": "A list of links from a data connector to a project",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DataConnectorToProjectLink"
        }
      },
      "DataConnectorToProjectLink": {
        "description": "A link from a data connector to a project in Renku 2.0",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Ulid"
          },
          "data_connector_id": {
            "$ref": "#/components/schemas/Ulid"
          },
          "project_id": {
            "$ref": "#/components/schemas/Ulid"
          },
          "creation_date": {
            "$ref": "#/components/schemas/CreationDate"
          },
          "created_by": {
            "$ref": "#/components/schemas/UserId"
          }
        },
        "required": [
          "id",
          "data_connector_id",
          "project_id",
          "creation_date",
          "created_by"
        ]
      },
      "ProjectGetQuery": {
        "description": "Query params for project get request",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationRequest"
          },
          {
            "properties": {
              "namespace": {
                "description": "A namespace, used as a filter.",
                "type": "string",
                "default": ""
              },
              "direct_member": {
                "description": "A flag to filter projects where the user is a direct member.",
                "type": "boolean",
                "default": false
              }
            }
          }
        ]
      },
      "ProjectPermissions": {
        "description": "The set of permissions on a project",
        "type": "object",
        "properties": {
          "write": {
            "description": "The user can edit the project",
            "type": "boolean"
          },
          "delete": {
            "description": "The user can delete the project",
            "type": "boolean"
          },
          "change_membership": {
            "description": "The user can manage project members",
            "type": "boolean"
          }
        }
      },
      "PaginationRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "page": {
            "description": "Result's page number starting from 1",
            "type": "integer",
            "minimum": 1,
            "default": 1
          },
          "per_page": {
            "description": "The number of results per page",
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 20
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "minimum": 0,
                "exclusiveMinimum": true,
                "example": 1404
              },
              "detail": {
                "type": "string",
                "example": "A more detailed optional message showing what the problem was"
              },
              "message": {
                "type": "string",
                "example": "Something went wrong - please try again later"
              }
            },
            "required": ["code", "message"]
          }
        },
        "required": ["error"]
      }
    },
    "responses": {
      "Error": {
        "description": "The schema for all 4xx and 5xx responses",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "parameters": {
      "If-Match": {
        "in": "header",
        "name": "If-Match",
        "description": "If-Match header, for avoiding mid-air collisions",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ETag"
        }
      }
    }
  }
}
