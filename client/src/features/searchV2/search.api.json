{
  "openapi": "3.1.0",
  "info": {
    "title": "Search API",
    "version": "0.3.0"
  },
  "servers": [
    {
      "url": "/api/search",
      "description": "Renku Search API"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "description": "## Search Query\n\nThe search accepts queries in two representations: JSON and a simple\nquery string. A query may contain specific and unspecific search\nterms.\n\n### Query String\n\nA query is a sequence of words. All words that are not recognized as\nspecific search terms are used for searching in various entity\nproperties, such as `name` or `description`. Specific search terms are\nmatched exactly against a certain field. Terms are separated by\nwhitespace.\n\nExample:\n```\nnumpy flight visibility:public\n```\n\nSearches for entities containing `numpy` _and_ `flight` that are\npublic.\n\nThe term order is usually not relevant, it may influence the score of\na result, though.\n\nIf a value for a specific field contains whitespace, quotes or a comma\nit must be enclosed in quotes. Additionally, multiple values can be\nprovided for each field by using a comma separated list. The values\nare treated as alternatives, so any such value would yield a result.\n\nExample:\n```\nnumpy flight visibility:public,private\n```\n\nSearches for entities containing `numpy` _and_ `flight` that are\n_either_ `public` _or_ `private`.\n\n### Fields\n\nThe following fields are available:\n\n- `id`\n- `name`\n- `slug`\n- `visibility`\n- `created`\n- `createdBy`\n- `type`\n- `role`\n- `keyword`\n- `namespace`\n\nEach field allows to specify one or more values, separated by comma.\nThe value must be separated by a `:`. For date fields, additional `<`\nand `>` is supported.\n\n### EntityTypes\n\nThe field `type` allows to search for specific entity types. If it is\nmissing, all entity types are included in the result. Entity types are:\n\n- `Project`\n- `User`\n- `Group`\n\nExample:\n `type:Project`\n\n### Roles\n\nThe field `role` allows to search for projects the current user has\nthe given role. Other entities are excluded from the results.\n\n- `owner`\n- `editor`\n- `viewer`\n- `member`\n\n### Visibility\n\nThe `visibility` field can be used to restrict to entities with a\ncertain visibility. Users have a default visibility of `public`.\nPossbile values are:\n\n- `public`\n- `private`\n\n\n\n### Dates\n\nDate fields, like\n\n- `created`\n\naccept date strings which can be specified in various ways. There are\n\n- relative dates: `today`\n- partial timestamps: `2023-05`, `2023-11-12T10`\n- calculations based on the above: `today-5d`, `2023-10-15/10d`\n\n\n#### Relative dates\n\nThere are the following keywords for relative dates:\n\n- `today`\n- `yesterday`\n\n#### Partial Timestamps\n\nTimestamps must be in ISO8601 form and are UTC based and allow to\nspecify time up to seconds. The full form is\n\n```\nyyyy-mm-ddTHH:MM:ssZ\n```\n\nAny part starting from right can be omitted. When querying, it will be\nfilled with either the maximum or minimum possible value depending on\nthe side of comparison. When the date is an upper bound, the missing\nparts will be set to their minimum values. Conversely, when used as a\nlower bound then the parts are set to its maximum value.\n\nExample:\n- `created>2023-03` will turn into `created>2023-03-31T23:59:59`\n- `created<2023-03` will turn into `created<2023-03-01T00:00:00`\n\n#### Date calculations\n\nAt last, a date can be specified by adding or subtracting days from a\nreference date. The reference date must be given either as a relative\ndate or partial timestamp. Then a `+`, `-` or `/` follows with the\namount of days.\n\nThe `/` character allows to add and substract the days from the\nreference date, making the reference date the middle.\n\nExample:\n- `created>today-14d` things created from 14 days ago\n- `created<2023-05/14d` things created from last two weeks of April\n  and first two weeks of May\n\n#### Date Comparison\n\nComparing dates with `>` and `<` is done as expected. More interesting\nis to specify more than one date and the use of the `:` comparison.\n\nThe `:` can be used to specify ranges more succinctly. For a full\ntimestamp, it means /equals/. With partial timestamps it searches\nwithin the minimum and maximum possible date for that partial\ntimestamp.\n\nSince multiple values are combined using `OR`, it is possible to\nsearch in multiple ranges.\n\nExample:\n```\ncreated:2023-03,2023-06\n```\n\nThe above means to match entities created in March 2023 or June 2023.\n\n## Sorting\n\nThe query allows to define terms for sorting. Sorting is limited to\nspecific fields, which are:\n\n- `name`\n- `created`\n- `score`\n\nSorting by a field is defined by writing the field name, followed by a\ndash and the sort direction. Multiple such definitions can be\nspecified, using a comma separated list. Alternatively, multiple\n`sort:â€¦` terms will be combined into a single one in the order they\nappear.\n\nExample:\n`sort:score-desc,created-asc`\nis equivalent to\n`sort:score-desc sort:created-asc`\n",
        "operationId": "get",
        "parameters": [
          {
            "name": "Renku-Auth-Anon-Id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "User defined search query",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to retrieve, starting at 1",
            "required": false,
            "schema": {
              "default": 1,
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "How many items to return for one page",
            "required": false,
            "schema": {
              "default": 25,
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "x-page": {
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "x-per-page": {
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "x-total": {
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "x-total-pages": {
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "x-prev-page": {
                "required": false,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "x-next-page": {
                "required": false,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid value for: header Renku-Auth-Anon-Id, Invalid value for: query parameter page, Invalid value for: query parameter per_page",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "httpAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "FacetData": {
        "title": "FacetData",
        "examples": [
          {
            "entityType": {
              "Project": 15,
              "User": 3
            }
          }
        ],
        "type": "object",
        "required": ["entityType"],
        "properties": {
          "entityType": {
            "$ref": "#/components/schemas/Map_EntityType_Int"
          }
        }
      },
      "Group": {
        "title": "Group",
        "examples": [
          {
            "type": "Group",
            "id": "2CAF4C73F50D4514A041C9EDDB025A36",
            "name": "SDSC",
            "namespace": "SDSC",
            "description": "SDSC group",
            "score": 1.1
          }
        ],
        "type": "object",
        "required": ["id", "name", "namespace", "type"],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Map_EntityType_Int": {
        "title": "Map_EntityType_Int",
        "type": "object",
        "additionalProperties": {
          "type": "integer",
          "format": "int32"
        }
      },
      "PageDef": {
        "title": "PageDef",
        "type": "object",
        "required": ["limit", "offset"],
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PageWithTotals": {
        "title": "PageWithTotals",
        "type": "object",
        "required": ["page", "totalResult", "totalPages"],
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageDef"
          },
          "totalResult": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "prevPage": {
            "type": "integer",
            "format": "int32"
          },
          "nextPage": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Project": {
        "title": "Project",
        "examples": [
          {
            "type": "Project",
            "id": "01HRA7AZ2Q234CDQWGA052F8MK",
            "name": "renku",
            "slug": "renku",
            "namespace": "renku/renku",
            "repositories": ["https://github.com/renku"],
            "visibility": "public",
            "description": "Renku project",
            "createdBy": {
              "id": "1CAF4C73F50D4514A041C9EDDB025A36"
            },
            "creationDate": "2024-06-13T09:55:37.220279799Z",
            "keywords": ["data", "science"],
            "score": 1.0
          }
        ],
        "type": "object",
        "required": [
          "id",
          "name",
          "slug",
          "visibility",
          "createdBy",
          "creationDate",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "repositories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "visibility": {
            "$ref": "#/components/schemas/Visibility"
          },
          "description": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserId"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "SearchEntity": {
        "title": "SearchEntity",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Group"
          },
          {
            "$ref": "#/components/schemas/Project"
          },
          {
            "$ref": "#/components/schemas/User"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Project": "#/components/schemas/Project",
            "User": "#/components/schemas/User"
          }
        }
      },
      "SearchResult": {
        "title": "SearchResult",
        "type": "object",
        "required": ["facets", "pagingInfo"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchEntity"
            }
          },
          "facets": {
            "$ref": "#/components/schemas/FacetData"
          },
          "pagingInfo": {
            "$ref": "#/components/schemas/PageWithTotals"
          }
        }
      },
      "User": {
        "title": "User",
        "examples": [
          {
            "type": "User",
            "id": "1CAF4C73F50D4514A041C9EDDB025A36",
            "namespace": "renku/renku",
            "firstName": "Albert",
            "lastName": "Einstein",
            "score": 2.1
          }
        ],
        "type": "object",
        "required": ["id", "type"],
        "properties": {
          "id": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "UserId": {
        "title": "UserId",
        "examples": [
          {
            "id": "01HRA7AZ2Q234CDQWGA052F8MK"
          }
        ],
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "Visibility": {
        "title": "Visibility",
        "type": "string",
        "enum": ["Private", "Public"]
      }
    },
    "securitySchemes": {
      "httpAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
