{
  "openapi": "3.0.2",
  "info": {
    "title": "Renku Data Services API",
    "description": "This service is the main backend for Renku. It provides information about users, projects,\ncloud storage, access to compute resources and many other things.\n",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/api/data"
    },
    {
      "url": "/ui-server/api/data"
    }
  ],
  "paths": {
    "/user": {
      "get": {
        "summary": "Get information about the currently logged in user",
        "responses": {
          "200": {
            "description": "The currently logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithId"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["users"]
      }
    },
    "/user/secret_key": {
      "get": {
        "summary": "Get the current users secret key",
        "responses": {
          "200": {
            "description": "The secret key of the currently logged in user.\nThis endpoint is not publicly accessible.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecretKey"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["secrets"]
      }
    },
    "/users": {
      "get": {
        "summary": "List all users",
        "parameters": [
          {
            "in": "query",
            "name": "exact_email",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Return the user(s) with an exact match on the email provided"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of users in the service (this is a subset of what is in Keycloak)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersWithId"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["users"]
      }
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Get a specific user by their Keycloak ID",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithId"
                }
              }
            }
          },
          "404": {
            "description": "The user does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["users"]
      }
    },
    "/user/secrets": {
      "get": {
        "summary": "List all secrets for a user (keys only)",
        "parameters": [
          {
            "in": "query",
            "description": "Filter results based on secret kind",
            "name": "kind",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SecretKind",
              "default": "general"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's secrets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretsList"
                }
              }
            }
          },
          "404": {
            "description": "The user does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["secrets"]
      },
      "post": {
        "summary": "Create a new secret for the user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretPost"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Secret successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretWithId"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["secrets"]
      }
    },
    "/user/secrets/{secret_id}": {
      "get": {
        "summary": "Get a secret key by id",
        "parameters": [
          {
            "in": "path",
            "name": "secret_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretWithId"
                }
              }
            }
          },
          "404": {
            "description": "The user does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["secrets"]
      },
      "patch": {
        "summary": "Change a secret",
        "parameters": [
          {
            "in": "path",
            "name": "secret_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretPatch"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Secret successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretWithId"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["secrets"]
      },
      "delete": {
        "summary": "Delete a secret",
        "parameters": [
          {
            "in": "path",
            "name": "secret_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The secret was deleted or didn't exist"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": ["secrets"]
      }
    },
    "/error": {
      "get": {
        "summary": "Get a sample error response with status code 422",
        "responses": {
          "422": {
            "description": "The error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "summary": "Get the version of the service",
        "responses": {
          "200": {
            "description": "The error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserWithId": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UserId"
          },
          "username": {
            "$ref": "#/components/schemas/Username"
          },
          "email": {
            "$ref": "#/components/schemas/UserEmail"
          },
          "first_name": {
            "$ref": "#/components/schemas/UserFirstLastName"
          },
          "last_name": {
            "$ref": "#/components/schemas/UserFirstLastName"
          }
        },
        "required": ["id", "username"],
        "example": {
          "id": "some-random-keycloak-id",
          "username": "some-username",
          "first_name": "Jane",
          "last_name": "Doe"
        }
      },
      "UsersWithId": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/UserWithId"
        },
        "uniqueItems": true
      },
      "UserSecretKey": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "secret_key": {
            "type": "string",
            "description": "The users secret key"
          }
        }
      },
      "Version": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          }
        },
        "required": ["version"]
      },
      "UserId": {
        "type": "string",
        "description": "Keycloak user ID",
        "example": "f74a228b-1790-4276-af5f-25c2424e9b0c",
        "pattern": "^[A-Za-z0-9]{1}[A-Za-z0-9-]+$"
      },
      "Username": {
        "type": "string",
        "description": "Handle of the user",
        "example": "some-username",
        "minLength": 1,
        "maxLength": 99
      },
      "UserFirstLastName": {
        "type": "string",
        "description": "First or last name of the user",
        "example": "John",
        "minLength": 1,
        "maxLength": 256
      },
      "UserEmail": {
        "type": "string",
        "format": "email",
        "description": "User email",
        "example": "some-user@gmail.com"
      },
      "SecretsList": {
        "description": "A list of secrets",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SecretWithId"
        },
        "minItems": 0
      },
      "SecretWithId": {
        "description": "A Renku secret",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Ulid"
          },
          "name": {
            "$ref": "#/components/schemas/SecretName"
          },
          "modification_date": {
            "$ref": "#/components/schemas/ModificationDate"
          },
          "kind": {
            "$ref": "#/components/schemas/SecretKind"
          }
        },
        "required": ["id", "name", "modification_date", "kind"],
        "example": {
          "id": "01AN4Z79ZS5XN0F25N3DB94T4R",
          "name": "S3-Credentials",
          "modification_date": "2024-01-16T11:42:05Z"
        }
      },
      "SecretPost": {
        "description": "Secret metadata to be created",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/SecretName"
          },
          "value": {
            "$ref": "#/components/schemas/SecretValue"
          },
          "kind": {
            "$ref": "#/components/schemas/SecretKind"
          }
        },
        "required": ["name", "value", "kind"]
      },
      "SecretPatch": {
        "type": "object",
        "description": "Secret metadata to be modified",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SecretValue"
          }
        },
        "required": ["value"]
      },
      "SecretName": {
        "description": "Secret name",
        "type": "string",
        "minLength": 1,
        "maxLength": 99,
        "pattern": "^[a-zA-Z0-9_\\-.]*$",
        "example": "Data-S3-Secret_1"
      },
      "Ulid": {
        "description": "ULID identifier",
        "type": "string",
        "minLength": 26,
        "maxLength": 26,
        "pattern": "^[A-Z0-9]{26}$"
      },
      "ModificationDate": {
        "description": "The date and time the secret was created or modified (this is always in UTC)",
        "type": "string",
        "format": "date-time",
        "example": "2023-11-01T17:32:28Z"
      },
      "SecretValue": {
        "description": "Secret value that can be any text",
        "type": "string",
        "minLength": 1,
        "maxLength": 5000
      },
      "SecretKind": {
        "description": "Kind of secret",
        "type": "string",
        "enum": ["general", "storage"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "minimum": 0,
                "exclusiveMinimum": true,
                "example": 1404
              },
              "detail": {
                "type": "string",
                "example": "A more detailed optional message showing what the problem was"
              },
              "message": {
                "type": "string",
                "example": "Something went wrong - please try again later"
              }
            },
            "required": ["code", "message"]
          }
        },
        "required": ["error"]
      }
    },
    "responses": {
      "Error": {
        "description": "The schema for all 4xx and 5xx responses",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "oidc": {
        "type": "openIdConnect",
        "openIdConnectUrl": "/auth/realms/Renku/.well-known/openid-configuration"
      }
    }
  },
  "security": [
    {
      "oidc": ["openid"]
    }
  ]
}
