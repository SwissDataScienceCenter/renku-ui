import type { SessionStartDataConnectorConfiguration } from "../../sessionsV2/startSessionOptionsV2.types";
import type { CloudStorageSchema } from "../components/cloudStorage/projectCloudStorage.types";
import {
  dataConnectorsOverrideFromConfig,
  getSchemaOptions,
} from "./projectCloudStorage.utils";

describe("storageDefinitionFromConfig", () => {
  it("should return the correct storage definition", () => {
    const config: SessionStartDataConnectorConfiguration = {
      active: true,
      skip: false,
      touched: true,
      dataConnector: {
        id: "ULID-1",
        etag: "foo",
        name: "example storage",
        namespace: "user1-uuid",
        slug: "example-storage",
        storage: {
          storage_type: "s3",
          configuration: {
            type: "s3",
            provider: "AWS",
            access_key_id: "<sensitive>",
            secret_access_key: "<sensitive>",
          },
          source_path: "bucket/my-source",
          target_path: "external_storage/aws",
          readonly: true,
          sensitive_fields: [
            {
              name: "access_key_id",
              help: "AWS Access Key ID.\n\nLeave blank for anonymous access or runtime credentials.",
              provider: "",
              default: "",
              default_str: "",
              required: false,
              ispassword: false,
              sensitive: true,
              advanced: false,
              exclusive: false,
              type: "string",
            },
            {
              name: "secret_access_key",
              help: "AWS Secret Access Key (password).\n\nLeave blank for anonymous access or runtime credentials.",
              provider: "",
              default: "",
              default_str: "",
              required: false,
              ispassword: false,
              sensitive: true,
              advanced: false,
              exclusive: false,
              type: "string",
            },
          ],
        },
        creation_date: "2023-11-15T09:55:59Z",
        created_by: "user1-uuid",
        visibility: "public" as const,
        description: "Example storage description",
      },
      sensitiveFieldDefinitions: [
        {
          friendlyName: "Access Key ID",
          help: "AWS Access Key ID.\n\nLeave blank for anonymous access or runtime credentials.",
          name: "access_key_id",
        },
        {
          friendlyName: "Secret Access Key (password)",
          help: "AWS Secret Access Key (password).\n\nLeave blank for anonymous access or runtime credentials.",
          name: "secret_access_key",
        },
      ],
      sensitiveFieldValues: {
        access_key_id: "access key",
        secret_access_key: "secret key",
      },
      saveCredentials: false,
      savedCredentialFields: [],
    };
    const result = dataConnectorsOverrideFromConfig(config);
    expect(result).toEqual([
      {
        configuration: {
          type: "s3",
          provider: "AWS",
          access_key_id: "access key",
          secret_access_key: "secret key",
        },
        data_connector_id: "ULID-1",
        skip: false,
      },
    ]);
  });

  it("should return the correct schema options", () => {
    const schema: CloudStorageSchema[] = [
      {
        name: "PolyBox",
        description: "Polybox",
        prefix: "polybox",
        options: [
          {
            name: "url",
            help: "URL of http host to connect to.\n\nE.g. https://example.com.",
            provider: "personal",
            default: "https://polybox.ethz.ch/remote.php/webdav/",
            default_str: "",
            required: false,
            sensitive: false,
            advanced: false,
            exclusive: false,
            type: "string",
            examples: [],
            ispassword: false,
            datatype: "string",
            hide: false,
            filteredExamples: [],
          },
          {
            name: "user",
            help: "User name.\n\nIn case NTLM authentication is used, the username should be in the format 'Domain\\User'.",
            provider: "personal",
            default: "",
            default_str: "",
            required: false,
            sensitive: false,
            advanced: false,
            exclusive: false,
            type: "string",
            examples: [],
            ispassword: false,
            datatype: "string",
            hide: false,
            filteredExamples: [],
          },
          {
            name: "pass",
            help: "Password.",
            provider: "",
            default: "",
            default_str: "",
            required: false,
            sensitive: true,
            advanced: false,
            exclusive: false,
            type: "string",
            examples: [],
            ispassword: true,
            datatype: "string",
            hide: false,
            filteredExamples: [],
          },
          {
            name: "bearer_token",
            help: "Bearer token instead of user/pass (e.g. a Macaroon).",
            provider: "personal",
            default: "",
            default_str: "",
            required: false,
            sensitive: true,
            advanced: false,
            exclusive: false,
            type: "string",
            examples: [],
            ispassword: false,
            datatype: "string",
            hide: false,
            filteredExamples: [],
          },
          {
            name: "bearer_token_command",
            help: "Command to run to get a bearer token.",
            provider: "personal",
            default: "",
            default_str: "",
            required: false,
            sensitive: false,
            advanced: true,
            exclusive: false,
            type: "string",
            examples: [],
            ispassword: false,
            datatype: "string",
            hide: false,
            filteredExamples: [],
          },
          {
            name: "encoding",
            help: "",
            provider: "",
            default: "",
            default_str: "",
            required: false,
            sensitive: false,
            advanced: true,
            exclusive: false,
            type: "string",
            examples: [],
            ispassword: false,
            datatype: "string",
            hide: false,
            filteredExamples: [],
          },
          {
            name: "headers",
            help: 'Set HTTP headers for all transactions.\n\nUse this to set additional HTTP headers for all transactions\n\nThe input format is comma separated list of key,value pairs.  Standard\n[CSV encoding](https://godoc.org/encoding/csv) may be used.\n\nFor example, to set a Cookie use \'Cookie,name=value\', or \'"Cookie","name=value"\'.\n\nYou can set multiple headers, e.g. \'"Cookie","name=value","Authorization","xxx"\'.\n',
            provider: "personal",
            default: "",
            default_str: "",
            required: false,
            sensitive: false,
            advanced: true,
            exclusive: false,
            type: "CommaSepList",
            examples: [],
            ispassword: false,
            datatype: "string",
            hide: false,
            filteredExamples: [],
          },
          {
            name: "pacer_min_sleep",
            help: "Minimum time to sleep between API calls.",
            provider: "",
            default: 10000000,
            default_str: "10ms",
            required: false,
            sensitive: false,
            advanced: true,
            exclusive: false,
            type: "Duration",
            examples: [],
            ispassword: false,
            datatype: "string",
            hide: false,
            filteredExamples: [],
          },
          {
            name: "provider",
            help: "Choose the mode to access the data source.",
            provider: "",
            default: "",
            default_str: "",
            examples: [
              {
                value: "personal",
                help: "Connect to your personal storage space. This data connector cannot be used to share access to a folder.",
                provider: "",
              },
              {
                value: "shared",
                help: "Connect a 'public' folder shared with others. A 'public' folder may or may not be protected with a password.",
                provider: "",
              },
            ],
            required: true,
            sensitive: false,
            advanced: false,
            exclusive: true,
            type: "string",
            ispassword: false,
            datatype: "string",
            hide: false,
            filteredExamples: [],
          },
          {
            name: "public_link",
            help: "Shared folder link. E.g., https://polybox.ethz.ch/index.php/s/8NffJ3rFyHaVyyy",
            provider: "shared",
            default: "",
            default_str: "",
            required: true,
            sensitive: false,
            advanced: false,
            exclusive: false,
            type: "string",
            examples: [],
            ispassword: false,
            datatype: "string",
            hide: false,
            filteredExamples: [],
          },
        ],
      },
    ];
    const result = getSchemaOptions(schema, false, "polybox", "shared");
    const passOption = result?.find((o) => o.name === "pass");
    expect(passOption?.help).toEqual(
      "If there is a password for the folder, enter that in the password field. Otherwise, leave it blank"
    );
    expect(passOption?.friendlyName).toEqual("Password");

    const resultPersonal = getSchemaOptions(
      schema,
      false,
      "polybox",
      "personal"
    );
    const passOptionPersonal = resultPersonal?.find((o) => o.name === "pass");
    expect(passOptionPersonal?.friendlyName).toEqual("Token (or password)");
  });
});
