/*!
 * Copyright 2022 - Swiss Data Science Center (SDSC)
 * A partnership between École Polytechnique Fédérale de Lausanne (EPFL) and
 * Eidgenössische Technische Hochschule Zürich (ETHZ).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from "react";
import { StoryFn as Story } from "@storybook/react";
import { NewProjectTemplate, Repository } from "../../model/RenkuModels";
import TemplateSelector, { TemplateSelectorProps } from "./TemplateSelector";

export default {
  title: "Components/Forms/Template Selector",
  component: TemplateSelector,
  argTypes: {
    repositories: {
      description:
        "Array repository with format { id: string;\n" +
        "  url: string;\n" +
        "  ref: string;\n" +
        "  name: string; }",
    },
    selected: {
      options: [
        "Renku/python-minimal",
        "Renku/R-minimal",
        "Renku/bioc-minimal",
        "Renku/julia-minimal",
        "Renku/minimal",
      ],
      control: { type: "select" },
      description: "Callback when template is selected",
    },
    templates: {
      description:
        "Array Template with format {   id: string;\n" +
        "  description: string;\n" +
        "  folder: string;\n" +
        "  icon: string;\n" +
        "  name: string;\n" +
        "  variables?: Object;\n" +
        "  parentRepo?: string; } ",
    },
    isRequired: {
      control: { type: "boolean" },
      description: "isRequired must be set to true for it to take effect",
    },
    isInvalid: {
      control: { type: "boolean" },
    },
    isDisabled: {
      control: { type: "boolean" },
    },
  },
};

const Template: Story<TemplateSelectorProps> = (args) => (
  <TemplateSelector {...args} />
);

const repositories: Repository[] = [
  {
    name: "Renku",
    ref: "master",
    url: "https://github.com/SwissDataScienceCenter/renku-project-template",
  },
];
const templates: NewProjectTemplate[] = [
  {
    description:
      "The simplest Python-3.9-based renku " +
      "project with a basic directory structure and necessary supporting files.",
    // eslint-disable-next-line
    icon: "",
    id: "Renku/python-minimal",
    name: "Basic Python (3.9) Project",
    parentRepo: "Renku",
    parentTemplate: "python-minimal",
    variables: {},
  },
  {
    description:
      "The simplest R-4.1.2-based renku project with a basic directory structure " +
      "and necessary supporting files.",
    icon: undefined,
    id: "Renku/R-minimal",
    name: "Basic R (4.1.2) Project",
    parentRepo: "Renku",
    parentTemplate: "R-minimal",
    variables: {},
  },
  {
    description:
      "The simplest R bioconductor-3.14-based renku project with a " +
      "basic directory structure and necessary supporting files.",
    icon: undefined,
    id: "Renku/bioc-minimal",
    name: "R-Bioconductor (3.14) Project",
    parentRepo: "Renku",
    parentTemplate: "bioc-minimal", // eslint-disable-line spellcheck/spell-checker
    variables: {},
  },
  {
    description:
      "The simplest Julia 1.7.1-based renku project with a basic " +
      "directory structure and necessary supporting files.",
    icon: undefined,
    id: "Renku/julia-minimal",
    name: "Basic Julia (1.7.1) Project",
    parentRepo: "Renku",
    parentTemplate: "julia-minimal", // eslint-disable-line spellcheck/spell-checker
    variables: {},
  },
  {
    description:
      "The simplest renku project template with files for renku CLI and " +
      "launching projects on renkulab.",
    icon: undefined,
    id: "Renku/minimal",
    name: "Minimal Renku",
    parentRepo: "Renku",
    parentTemplate: "minimal",
    variables: {},
  },
];

export const Default = Template.bind({});
Default.args = {
  repositories,
  templates,
  isRequired: true,
  isInvalid: false,
  isDisabled: false,
};

export const FetchingTemplates = Template.bind({});
FetchingTemplates.args = {
  repositories,
  templates,
  isRequired: true,
  isInvalid: false,
  isDisabled: false,
  isFetching: true,
};

export const CustomRepoNoFetchedData = Template.bind({});
CustomRepoNoFetchedData.args = {
  repositories,
  templates,
  isRequired: true,
  isInvalid: false,
  isDisabled: false,
  noFetchedUserRepo: true,
};

export const Selected = Template.bind({});
Selected.args = {
  repositories,
  templates,
  selected: "Renku/python-minimal",
  isRequired: true,
  isInvalid: false,
  isDisabled: false,
};

export const Invalid = Template.bind({});
Invalid.args = {
  repositories,
  templates,
  isRequired: true,
  isInvalid: true,
};

export const Disabled = Template.bind({});
Disabled.args = {
  repositories,
  templates,
  isDisabled: true,
};
