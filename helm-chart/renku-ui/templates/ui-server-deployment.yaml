apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ui-server.fullname" . }}
  labels:
    {{- include "ui-server.labels" . | nindent 4 }}
  {{- if .Values.server.prometheus.enabled }}
  annotations:
    {{- .Values.server.prometheus.annotations | toYaml | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.server.autoscaling.enabled }}
  replicas: {{ .Values.server.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "ui-server.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "ui-server.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        # The label below enables the gateway to connect to redis
        {{ .Values.global.redis.clientLabel | toYaml | nindent 8 }}
    spec:
    {{- with .Values.server.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      securityContext:
        {{- toYaml .Values.server.podSecurityContext | nindent 8 }}
      automountServiceAccountToken: {{ .Values.global.debug }}
      initContainers:
        {{- include "certificates.initContainer" . | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.server.securityContext | nindent 12 }}
          image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}"
          imagePullPolicy: {{ .Values.server.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: SERVER_URL
              value: {{ .Values.server.url | default (printf "%s://%s" (include "ui.protocol" .) .Values.global.renku.domain) | quote }}
            - name: UI_SERVER_VERSION
              value: {{ .Chart.Version | quote }}
            - name: SERVER_KEEP_COOKIES
              value: |
                {{- include "ui-server.keepCookies" . | nindent 16 }}
            - name: GATEWAY_URL
              value: {{ .Values.gateway.url | default (printf "%s://%s/api" (include "ui.protocol" .) .Values.global.renku.domain) | quote }}
            - name: GATEWAY_LOGIN_PATH
              value: {{ .Values.gateway.loginSuffix | default (printf "/auth/login") | quote }}
            - name: GATEWAY_LOGOUT_PATH
              value: {{ .Values.gateway.logoutSuffix | default (printf "/auth/logout") | quote }}
            - name: AUTH_SERVER_URL
              value: {{ .Values.server.authentication.url | default (printf "%s://%s/auth/realms/Renku" (include "ui.protocol" .) .Values.global.renku.domain) | quote }}
            - name: AUTH_CLIENT_ID
              value: {{ .Values.server.authentication.id | default (printf "renku-ui") | quote }}
            - name: AUTH_CLIENT_SECRET
              value: {{ .Values.server.authentication.secret | default (printf "%s" .Values.global.uiserver.clientSecret) | quote }}
            - name: AUTH_TOKEN_TOLERANCE
              value: {{ .Values.server.authentication.expirationTolerance | default (printf "10") | quote }}
            {{- if .Values.server.sentry.enabled }}
            - name: SENTRY_ENABLED
              value: {{ .Values.server.sentry.enabled | quote }}
            - name: SENTRY_URL
              value: {{ .Values.server.sentry.dsn | quote }}
            - name: SENTRY_NAMESPACE
              value: {{ .Values.server.sentry.environment | default (printf "%s" .Release.Namespace) | quote }}
            - name: SENTRY_TRACE_RATE
              value: {{ .Values.server.sentry.sampleRate | quote }}
            - name: SENTRY_DEBUG
              value: {{ .Values.server.sentry.debugMode | quote }}
            {{- end }}
            - name: WEBSOCKET_ENABLED
              value: {{ .Values.server.webSocket.enabled | quote }}
            - name: REDIS_HOST
              value: {{ .Values.global.redis.host | quote }}
            - name: REDIS_IS_SENTINEL
              value: {{ .Values.global.redis.sentinel.enabled | quote }}
            - name: REDIS_MASTER_SET
              value: {{ .Values.global.redis.sentinel.masterSet | quote }}
            - name: REDIS_DATABASE
              value: {{ .Values.global.redis.dbIndex.uiServer | quote }}
            - name: REDIS_PORT
              value: {{ .Values.global.redis.port | quote }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.existingSecret }}
                  key: {{ .Values.global.redis.existingSecretPasswordKey }}
            - name: PROMETHEUS_ENABLED
              value: {{ .Values.server.prometheus.enabled | quote }}
          livenessProbe:
            httpGet:
              path: /liveness
              port: http
          readinessProbe:
            httpGet:
              path: /readiness
              port: http
          startupProbe:
            httpGet:
              path: /startup
              port: http
            failureThreshold: 10
            periodSeconds: 5
          resources:
            {{- toYaml .Values.server.resources | nindent 12 }}
          volumeMounts:
            {{- include "certificates.volumeMounts.system" . | nindent 12 }}
      {{- with .Values.server.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.server.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.server.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        {{- include "certificates.volumes" . | nindent 8 }}
